from freightman.models import FreightBooking, FreightBookingPartyAddress, AddressBook, FreightBookingOrderNote, FreightBookingPortInfo, HAWB, FreightBookingGoodsInfo
from django.conf import settings
from django.shortcuts import reverse


def booking_dict_for_booking_selection(request, booking: FreightBooking):
    hawb_q = HAWB.objects.filter(booking=booking)
    return {
        'id': booking.id,
        'public_id': booking.globalid,
        'org': booking.org.dict(request),
        'edd': booking.edd,
        'entry_at': booking.entry_at,
        'confirmed_at': booking.confirmed_at.strftime(settings.FRONTEND_DATE_FORMAT_HUMAN) if booking.confirmed_at else '',
        'hawb_public_id': hawb_q.first().public_id if hawb_q.exists() else ''
    }


def booking_info_to_hawb_formdata(request, booking_id: int):
    booking = FreightBooking.objects.get(id=booking_id)
    shipper_q = FreightBookingPartyAddress.objects.filter(is_shipper=True, booking_id=booking_id)
    consignee_q = FreightBookingPartyAddress.objects.filter(is_consignee=True, booking_id=booking_id)
    shipper_address = shipper_q.first().addressbook if shipper_q.exists() else None  # type: AddressBook
    consignee_address = consignee_q.first().addressbook if consignee_q.exists() else None  # type: AddressBook
    ordernote = FreightBookingOrderNote.objects.get(booking_id=booking_id)
    portsinfo_q = FreightBookingPortInfo.objects.filter(booking_id=booking_id)
    portsinfo = portsinfo_q.first()  # type: FreightBookingPortInfo
    goodsinfo_q = FreightBookingGoodsInfo.objects.filter(booking_id=booking_id)
    currency = goodsinfo_q.first().currency.code if goodsinfo_q.exists() else ''

    formdata = {
        'booking_reference_number': booking.globalid,
        'shipper_name': shipper_address.company_name if shipper_address else '',
        'shipper_address': shipper_address.address if shipper_address else '',
        'shipper_po_code': shipper_address.postcode if shipper_address else '',
        'shipper_city': shipper_address.city.id if shipper_address else '',
        'shipper_state': shipper_address.state if shipper_address else '',
        'shipper_country': shipper_address.country.id if shipper_address else '',
        'shipper_contact': shipper_address.contact if shipper_address else '',
        'shipper_tel_number': shipper_address.phone if shipper_address else '',
        'shipper_mob_num': shipper_address.mobile if shipper_address else '',
        'shipper_fax_num': shipper_address.fax if shipper_address else '',
        'shipper_email': shipper_address.email if shipper_address else '',
        'shipper_acc_no': '',
        'consignee_name': consignee_address.company_name if consignee_address else '',
        'consignee_address': consignee_address.address if consignee_address else '',
        'consignee_po_code': consignee_address.postcode if consignee_address else '',
        'consignee_city': consignee_address.city.id if consignee_address else '',
        'consignee_state': consignee_address.state if consignee_address else '',
        'consignee_country': consignee_address.country.id if consignee_address else '',
        'consignee_contact': consignee_address.contact if consignee_address else '',
        'consignee_tel_number': consignee_address.phone if consignee_address else '',
        'consignee_mob_num': consignee_address.mobile if consignee_address else '',
        'consignee_fax_num': consignee_address.fax if consignee_address else '',
        'consignee_email': consignee_address.email if consignee_address else '',
        'consignee_acc_no': '',
        'carrier_agent_name': '',
        'carrier_agent_city': '',
        'carrier_agent_state': '',
        'carrier_agent_country': '',
        'carrier_agent_ffl': '',
        'carrier_agent_date': '',
        'carrier_agent_iata_code': '',
        'carrier_agent_acc_no': '',
        'payment_type': ordernote.payment_instruction_id,
        'departure_airport': portsinfo.port_of_loading.id if portsinfo else '',
        'requested_routing': '',
        'destination_to_1_airport': '',
        'destination_to_1_airline': '',
        'destination_to_2_airport': '',
        'destination_by_2_airline': '',
        'destination_to_3_airport': '',
        'destination_to_3_airlines': '',
        'dest_airport': portsinfo.port_of_destination.id if portsinfo else '',
        'requested_flight_date': '',
        'reff_no_1': '',
        'reff_no_2': '',
        'reff_no_3': '',
        'currency': currency,
        'cngs_code': 'N.D.V.',
        'wt': sum([g.weight_kg for g in goodsinfo_q]),
        'other_wt': '',
        'carriage_value': 'N.V.D.',
        'customs_value': 'N.V.D.',
        'insurance_amount': 'N.V.D.',
        'handling_info': '',
        'goods_no_piece_rcp': sum([g.no_of_pieces for g in goodsinfo_q]),
        'goods_gross_weight': sum([g.weight_kg for g in goodsinfo_q]),
        'goods_weight_unit': 'kg',
        'goods_commodity_item_no': '',
        'goods_chargeable_weight': sum([g.chargable_weight for g in goodsinfo_q]),
        'goods_rate': '',
        'goods_total': '',
        'goods_nature': '',
        'others_prepaid': '',
        'others_collect': '',
        'others_valuation_prepaid': '',
        'others_valuation_collect': '',
        'others_tax_prepaid': '',
        'others_tax_collect': '',
        'others_cda_prepaid': '',
        'others_cda_collect': '',
        'others_cdc_prepaid': '',
        'others_cdc_collect': '',
        'others_total_prepaid': '',
        'others_total_collect': '',
        'others_ccr': '',
        'others_ccc_dest': '',
        'others_cad': '',
        'others_tcc': '',
        'others_charges': '',
        'others_signature': '',
        'others_ex_date': '',
        'others_ex_loc': '',
        'others_sic': '',
    }
    return formdata


def hawb_dict_for_frontend(request, id: int):
    hawb = HAWB.objects.get(id=id)
    shipper_address = hawb.shipper
    consignee_address = hawb.consignee
    formdata = {
        'hawb_reference_number': hawb.public_id,
        'booking_globalid': hawb.booking.public_id if hawb.booking else '',
        'booking_reference_number': hawb.booking.public_id if hawb.booking else '',
        'house_id': hawb.supplier_id,
        'print_preview_url': reverse('forwarder-hawb-print-preview-page', args=(hawb.public_id,)),
        'shipper_name': shipper_address.company_name if shipper_address else '',
        'shipper_address': shipper_address.address if shipper_address else '',
        'shipper_po_code': shipper_address.postcode if shipper_address else '',
        'shipper_city': shipper_address.city.id if shipper_address else '',
        'shipper_state': shipper_address.state if shipper_address else '',
        'shipper_country': shipper_address.country.id if shipper_address else '',
        'shipper_contact': shipper_address.contact if shipper_address else '',
        'shipper_tel_number': shipper_address.phone if shipper_address else '',
        'shipper_mob_num': shipper_address.mobile if shipper_address else '',
        'shipper_fax_num': shipper_address.fax if shipper_address else '',
        'shipper_email': shipper_address.email if shipper_address else '',
        'shipper_acc_no': '',
        'consignee_name': consignee_address.company_name if consignee_address else '',
        'consignee_address': consignee_address.address if consignee_address else '',
        'consignee_po_code': consignee_address.postcode if consignee_address else '',
        'consignee_city': consignee_address.city.id if consignee_address else '',
        'consignee_state': consignee_address.state if consignee_address else '',
        'consignee_country': consignee_address.country.id if consignee_address else '',
        'consignee_contact': consignee_address.contact if consignee_address else '',
        'consignee_tel_number': consignee_address.phone if consignee_address else '',
        'consignee_mob_num': consignee_address.mobile if consignee_address else '',
        'consignee_fax_num': consignee_address.fax if consignee_address else '',
        'consignee_email': consignee_address.email if consignee_address else '',
        'consignee_acc_no': '',

        'carrier_agent_name': hawb.carrier_agent_name,
        'carrier_agent_city': hawb.carrier_agent_city_id,
        'carrier_agent_state': hawb.carrier_agent_state,
        'carrier_agent_country': hawb.carrier_agent_country_id,
        'carrier_agent_ffl': hawb.carrier_agent_ffl_no,
        'carrier_agent_date': hawb.carrier_agent_date.strftime('%Y-%m-%d') if hawb.carrier_agent_date else '',
        'carrier_agent_iata_code': hawb.carrier_agent_iata_code,
        'carrier_agent_acc_no': hawb.carrier_agent_account_no,

        'payment_type': hawb.payment_type_id,
        'departure_airport': hawb.airport_of_departure_id,
        'requested_routing': hawb.requested_routing,
        'destination_to_1_airport': hawb.to_1_airport_id,
        'destination_to_1_airline': hawb.to_1_airline_id,
        'destination_to_1_flight_num': hawb.to_1_flight_num,
        'destination_to_1_flight_date': hawb.to_1_flight_date.strftime('%Y-%m-%d') if hawb.to_1_flight_date else '',
        'destination_to_2_airport': hawb.to_2_airport_id,
        'destination_by_2_airline': hawb.to_2_airline_id,
        'destination_to_2_flight_num': hawb.to_2_flight_num,
        'destination_to_2_flight_date': hawb.to_2_flight_date.strftime('%Y-%m-%d') if hawb.to_2_flight_date else '',
        'destination_to_3_airport': hawb.to_3_airport_id,
        'destination_to_3_airline': hawb.to_3_airline_id,
        'destination_to_3_flight_num': hawb.to_3_flight_num,
        'destination_to_3_flight_date': hawb.to_3_flight_date.strftime('%Y-%m-%d') if hawb.to_3_flight_date else '',
        'dest_airport': hawb.airport_of_destination_id,
        'requested_flight_date': '',
        'reff_no_1': '',
        'reff_no_2': '',
        'reff_no_3': '',
        'currency': hawb.currency_id,
        'cngs_code': hawb.cngs_code,
        'wt': hawb.wt_val_payment_type_id,
        'other_wt': hawb.other_payment_type_id,
        'carriage_value': hawb.declared_val_for_carriage,
        'customs_value': hawb.declared_val_for_customs,
        'insurance_amount': hawb.amt_of_insurance,
        'handling_info': hawb.handling_info,
        'goods_no_piece_rcp': hawb.goods_noofpcsrcp,
        'goods_gross_weight': hawb.goods_grossweight,
        'goods_weight_unit': hawb.goods_weightunit,
        'goods_commodity_item_no': hawb.goods_commodityitemno,
        'goods_chargeable_weight': hawb.goods_chargableweight,
        'goods_rate': hawb.goods_ratecharge,
        'goods_total': hawb.goods_total,
        'goods_nature': hawb.goods_natureandquantity,
        'weightcharge_prepaid': hawb.weightcharge_prepaid,
        'weightcharge_collect': hawb.weightcharge_collect,
        'others_valuation_prepaid': hawb.valuationcharge_prepaid,
        'others_valuation_collect': hawb.valuationcharge_collect,
        'others_tax_prepaid': hawb.tax_prepaid,
        'others_tax_collect': hawb.tax_collect,
        'others_cda_prepaid': hawb.totalotherchargesdueagent_prepaid,
        'others_cda_collect': hawb.totalotherchargesdueagent_collect,
        'others_cdc_prepaid': hawb.totalotherchargesduecarrier_prepaid,
        'others_cdc_collect': hawb.totalotherchargesduecarrier_collect,
        'others_total_prepaid': hawb.total_prepaid,
        'others_total_collect': hawb.total_collect,
        'others_ccr': hawb.currencyconversionrate,
        'others_ccc_dest': hawb.ccchargesindestcurrency,
        'others_cad': hawb.chargesatdestination_collect,
        'others_tcc': hawb.totalcharges_collect,
        'others_charges': hawb.charges_other,
        'others_ex_date': hawb.executed_on_date.strftime('%Y-%m-%d') if hawb.executed_on_date else '',
        'others_ex_loc': hawb.executed_at_city_id,
        'others_signature': hawb.signature_shipperoragent,
        'others_sic': hawb.signature_issuingcarrieroragent,
    }
    return formdata
